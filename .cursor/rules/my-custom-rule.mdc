---
alwaysApply: true
---

# Stock-A-Future 项目开发规范

## 🔧 技术栈要求

### Go语言规范
- **版本要求**: 使用 Go 1.24 或更高版本
- **模块管理**: 严格使用 go.mod 进行依赖管理
- **代码风格**: 遵循官方 Go Code Review Comments 规范
- **HTTP框架**: 使用标准库 `net/http` 和 Go 1.22+ 的增强版 `ServeMux`

### 前端技术栈
- **CSS框架**: TailwindCSS + DaisyUI
- **图表库**: ECharts (本地版本，非CDN)
- **JavaScript**: 原生ES6+，模块化架构
- **构建工具**: TailwindCSS CLI

## 📋 代码质量标准

### Go代码规范
1. **错误处理**:
   - 使用标准库 `errors` 包进行错误包装
   - 实现结构化错误类型，包含错误码和详细信息
   - 避免使用中文错误信息，便于国际化

2. **并发处理**:
   - 必须使用 `context` 包管理请求生命周期
   - 使用 `sync` 包进行并发控制
   - 避免大范围锁定，优化性能

3. **API设计**:
   - 严格遵循RESTful设计原则
   - 使用统一的JSON响应格式
   - 实现适当的HTTP状态码
   - 添加请求验证和输入检查

4. **数据库操作**:
   - 使用事务确保数据一致性
   - 实现连接池管理
   - 添加SQL查询超时控制

### 前端代码规范
1. **JavaScript**:
   - 使用ES6+模块语法 (`import/export`)
   - 实现错误边界和异常处理
   - 使用 `async/await` 处理异步操作
   - 避免全局变量，使用命名空间

2. **CSS/样式**:
   - 优先使用TailwindCSS工具类
   - 使用DaisyUI组件系统
   - 实现响应式设计
   - 避免内联样式

3. **用户体验**:
   - 实现加载状态指示器
   - 添加错误提示和用户反馈
   - 确保无障碍访问性(a11y)

## 🏗️ 架构模式

### 后端架构
- **分层架构**: `cmd` → `internal/handler` → `internal/service` → `internal/models`
- **依赖注入**: 使用构造函数注入，避免全局变量
- **接口设计**: 定义清晰的接口边界，便于测试和扩展
- **中间件模式**: 实现日志记录、CORS、认证等横切关注点

### 前端架构
- **模块化设计**: 按功能划分JavaScript模块
- **服务层**: 统一的API调用服务
- **组件化**: 可复用的UI组件
- **状态管理**: 集中式状态管理模式

## 🧪 测试要求

### 测试覆盖率
- **单元测试**: 核心业务逻辑 > 80%
- **集成测试**: API端点测试
- **基准测试**: 性能关键路径
- **模糊测试**: 输入验证和边界条件

### 测试规范
- 使用 `testing` 包进行测试
- 实现Mock对象进行依赖隔离
- 使用表驱动测试模式
- 添加测试数据清理逻辑

### 网络调试最佳实践
- **优先使用Go单元测试进行网络调用调试**，而不是curl等命令行工具
- **跨平台兼容性**: Go单元测试在Windows/Linux/macOS上表现一致
- **AKTools调试环境**: 默认假设AKTools服务运行在`http://127.0.0.1:8080`端口
- **调试测试模板**:
  ```go
  func TestAPIDebugging(t *testing.T) {
      client := NewAKToolsClient("http://127.0.0.1:8080")
      
      // 测试API连接
      err := client.TestConnection()
      if err != nil {
          t.Fatalf("AKTools连接失败: %v", err)
      }
      
      // 测试具体API调用
      result, err := client.SomeAPIMethod("test_param")
      if err != nil {
          t.Logf("❌ API调用失败: %v", err)
      } else {
          t.Logf("✅ API调用成功: %+v", result)
      }
  }
  ```
- **测试驱动的API调试**: 当遇到API问题时，先写测试用例验证不同参数和格式
- **详细的测试日志**: 使用`t.Logf()`输出详细的调试信息，包括请求URL、参数、响应等

## 🔧 AKTools集成调试指南

### AKTools服务配置
- **默认端口**: AKTools服务默认运行在`http://127.0.0.1:8080`
- **API格式**: 使用`/api/public/{interface_name}`格式访问AKShare接口
- **股票代码格式**: 大多数API使用6位数字代码（如`600976`），不带市场后缀

### 常见API接口映射
```go
// 正确的AKTools接口名称
var aktoolsAPIMapping = map[string]string{
    "股票基本信息": "stock_individual_info_em",  // 不是 stock_zh_a_info
    "股票日线数据": "stock_zh_a_hist",
    "股票列表":     "stock_zh_a_spot",
    "利润表":      "stock_profit_sheet_by_report_em",
    "资产负债表":   "stock_balance_sheet_by_report_em",
    "现金流量表":   "stock_cash_flow_sheet_by_report_em",
}
```

### 调试流程模板
```go
// 1. 先测试AKTools连接
func TestAKToolsConnection(t *testing.T) {
    client := NewAKToolsClient("http://127.0.0.1:8080")
    err := client.TestConnection()
    if err != nil {
        t.Fatalf("AKTools连接失败: %v", err)
    }
    t.Logf("✅ AKTools连接成功")
}

// 2. 测试具体API接口
func TestSpecificAPI(t *testing.T) {
    client := NewAKToolsClient("http://127.0.0.1:8080")
    
    testCases := []struct {
        name   string
        symbol string
    }{
        {"健民集团", "600976"},
        {"平安银行", "000001"},
        {"海康威视", "002415"},
    }
    
    for _, tc := range testCases {
        t.Run(tc.name, func(t *testing.T) {
            result, err := client.GetStockBasic(tc.symbol)
            if err != nil {
                t.Logf("❌ %s (%s) 失败: %v", tc.name, tc.symbol, err)
            } else {
                t.Logf("✅ %s (%s) 成功: %s", tc.name, tc.symbol, result.Name)
            }
        })
    }
}
```

### 数据格式适配注意事项
- **stock_individual_info_em**: 返回key-value对数组格式，需要转换为map
- **财务报表API**: 返回所有期间数据，需要客户端筛选
- **实时数据API**: 返回所有股票数据，需要客户端根据代码筛选

### 错误排查步骤
1. **404错误**: 检查API接口名称是否正确，参考AKShare最新文档
2. **500错误**: 检查参数格式，特别是股票代码格式
3. **连接超时**: 确认AKTools服务是否正常运行，某些API响应较慢需要增加超时时间
4. **数据解析错误**: 检查返回数据格式是否与预期一致

### 性能注意事项
- **API响应时间**: 某些API（如`stock_zh_a_spot`）响应较慢，可能需要10秒以上
- **超时设置**: 建议设置30秒以上的超时时间进行调试测试
- **并发限制**: AKTools可能有并发限制，避免同时发起过多请求
- **缓存策略**: 对于相同请求，考虑实现客户端缓存减少API调用

### 运行调试测试
```bash
# 运行特定的调试测试
go test -v ./internal/client -run TestAKToolsConnection
go test -v ./internal/client -run TestSpecificAPI

# 运行所有AKTools相关测试
go test -v ./internal/client -run TestAKTools

# 使用调试模板进行全面测试
go test -v ./internal/client -run TestAKToolsDebugTemplate
go test -v ./internal/client -run TestAKToolsAPIDiscovery
go test -v ./internal/client -run TestStockCodeFormatsDebug
```

### 调试模板文件
- **文件位置**: `internal/client/aktools_debug_template_test.go`
- **用途**: 提供完整的AKTools API调试测试模板
- **包含功能**:
  - 连接测试
  - API接口发现
  - 股票代码格式测试
  - 原始API响应分析
  - 多股票测试
  - 性能测试
- **使用方式**: 复制相关测试函数到实际测试文件中，根据需要修改参数

## 🔒 安全要求

### API安全
- 实现请求速率限制
- 添加输入验证和SQL注入防护
- 设置适当的CORS策略
- 使用HTTPS传输敏感数据

### 数据安全
- 敏感信息脱敏处理
- 实现数据备份和恢复
- 添加审计日志记录

## 📊 性能优化

### 后端优化
- 实现数据缓存策略 (`DailyCacheService`)
- 使用连接池管理数据库连接
- 实现异步处理长时间任务
- 添加监控和指标收集

### 前端优化
- 实现懒加载和代码分割
- 优化图表渲染性能
- 使用防抖和节流技术
- 缓存静态资源

## 🚀 开发流程

### 代码提交
- 使用语义化提交信息
- 运行 `make fmt` 和 `make vet` 检查代码
- 确保所有测试通过
- 更新相关文档

### 部署要求
- 支持Docker容器化部署
- 实现健康检查端点
- 配置日志轮转和监控
- 支持优雅关闭

## 🔧 开发工具配置

### 必需的开发工具
```bash
# 代码格式化
make fmt

# 代码检查  
make vet

# 运行测试
make test

# 构建前端资源
npm run build:css
```

### IDE配置建议
- 启用Go模块支持
- 配置自动格式化 (gofmt)
- 启用静态分析工具
- 配置TailwindCSS智能提示

---

**重要**: 所有代码更改必须保持向后兼容，不能破坏现有的API接口和数据结构。在进行重构时，优先考虑渐进式改进而非激进式重写。